; vim: filetype=clojure

; Boundary's Riemann config.

(logging/init :file "/var/log/riemann/riemann.log")

(tcp-server :host <%= @tcp_listen_host %> :port <%= @tcp_listen_port %>)
(udp-server :host <%= @udp_listen_host %> :port <%= @udp_listen_port %>)

(periodically-expire <%= @expire_period %>)

(let [email (mailer {:from "<%= @email_from %>"})
      graph (graphite {:host "<%= @graphite_host %>"})

      ; Keep events for 5 minutes by default
      index (default :ttl <%= @event_ttl %> (update-index (index)))]

  (info "new")

  (streams
    ; Overall event rate
    (with {:metric 1.0 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))
   
    ; Graph health stats
    (where (service #"^(cpu|memory|load|disk)")
           graph)

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))

    ; Index most other stuff
    ;(index)

    (where (service #".*errs") graph)
    (where (service #".*packets") graph)

))
